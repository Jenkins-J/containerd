// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: github.com/containerd/containerd/pkg/cri/server/imageverifier/v1/image_verifier.proto
package imageverifier

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type ImageVerifierService interface {
	VerifyImage(context.Context, *VerifyImageRequest) (*VerifyImageResponse, error)
}

func RegisterImageVerifierService(srv *ttrpc.Server, svc ImageVerifierService) {
	srv.RegisterService("containerd.cri.imageverifier.ImageVerifier", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"VerifyImage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req VerifyImageRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.VerifyImage(ctx, &req)
			},
		},
	})
}

type imageVerifierClient struct {
	client *ttrpc.Client
}

func NewImageVerifierClient(client *ttrpc.Client) ImageVerifierService {
	return &imageVerifierClient{
		client: client,
	}
}

func (c *imageVerifierClient) VerifyImage(ctx context.Context, req *VerifyImageRequest) (*VerifyImageResponse, error) {
	var resp VerifyImageResponse
	if err := c.client.Call(ctx, "containerd.cri.imageverifier.ImageVerifier", "VerifyImage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
